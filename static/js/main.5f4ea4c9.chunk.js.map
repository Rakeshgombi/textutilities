{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","heading","rows","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","analyzed","i","length","document","getElementById","select","navigator","clipboard","writeText","trim","split","Alert","alert","role","style","textTransform","msg","prototype","PropTypes","string","isRequired","defaultProps","about","App","setalert","message","setTimeout","setMode","body","background","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kPAGe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,KAA3D,WAAd,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,8BAA8BE,KAAK,iBAAhD,SAAkEH,EAAMI,QACxE,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,iCAAiC,eAAa,OAAOE,KAAK,iBAAvE,sBAGJ,sBAAKF,UAAS,sCAAgD,SAAfD,EAAME,KAAkB,QAAU,QAAjF,UACE,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWC,GAAG,yBAAyBC,QAASP,EAAMQ,aAC/F,wBAAOP,UAAU,mBAAmBQ,QAAQ,yBAA5C,oBAAwF,UAAfT,EAAME,KAAmB,QAAU,QAA5G,8BCjBG,SAASQ,EAASV,GAC/B,IAkDA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,gCACE,sBAAKZ,UAAU,sBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,uBAAOQ,QAAQ,QAAQR,UAAU,aAAjC,SAA8C,6BAAKD,EAAMc,YACzD,0BAAUb,UAAS,yCAAoCD,EAAME,KAA1C,iBAAsE,SAAfF,EAAME,KAAkB,QAAU,QAAUI,GAAG,QAAQS,KAAK,IAAIC,MAAOJ,EAAMK,SA7CxI,SAACC,GACtBL,EAAQK,EAAMC,OAAOH,aA8CjB,sBAAKf,UAAU,6DAAf,UAEE,wBAAQI,KAAK,SAASJ,UAAU,sBAAsBM,QA7DxC,WACpB,IAAIa,EAAUR,EAAKS,cACnBR,EAAQO,GACRpB,EAAMsB,UAAU,yBAA0B,YA0DpC,kCACA,wBAAQjB,KAAK,SAASJ,UAAU,uBAAuBM,QAxDxC,WACrB,IAAIa,EAAUR,EAAKW,cACnBV,EAAQO,GACRpB,EAAMsB,UAAU,yBAA0B,YAqDpC,kCACA,wBAAQjB,KAAK,SAASJ,UAAU,sBAAsBM,QA1C/B,WAE7B,IADA,IAAIiB,EAAW,GACNC,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IACT,MAAhBb,EAAKa,EAAI,IAA0B,MAAZb,EAAKa,KAChCD,GAAYZ,EAAKa,IAGrBZ,EAAQW,GACRxB,EAAMsB,UAAU,2BAA4B,YAkCtC,iCACA,wBAAQjB,KAAK,SAASJ,UAAU,sBAAsBM,QAhC7B,WAE/B,IADA,IAAIiB,EAAW,GACNC,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IACb,OAAZb,EAAKa,KACTD,GAAYZ,EAAKa,IAGrBZ,EAAQW,GACRxB,EAAMsB,UAAU,wBAAyB,YAwBnC,6BACA,wBAAQjB,KAAK,SAASJ,UAAU,uBAAuBM,QAjDtC,WACvBM,EAAQ,IACRb,EAAMsB,UAAU,wBAAyB,YA+CnC,wBACA,wBAAQjB,KAAK,SAASJ,UAAU,uBAAuBM,QAvBvC,WACtB,IAAIK,EAAOe,SAASC,eAAe,SACnChB,EAAKiB,SACLC,UAAUC,UAAUC,UAAUpB,EAAKI,OACnChB,EAAMsB,UAAU,2BAA4B,YAmBtC,qCAGJ,sBAAKrB,UAAU,YAAf,UACE,mDAEA,8BAAIW,EAAKc,OAAS,EAAId,EAAKqB,OAAOC,MAAM,KAAKR,OAAS,EAAtD,WAAiEd,EAAKc,OAAtE,iBAEA,8BAAId,EAAKc,OAAS,EAAI,KAAQd,EAAKqB,OAAOC,MAAM,KAAKR,OAAS,EAA9D,mBACA,yCACA,4BAAId,EAAKc,OAAS,EAAId,EAAO,6CC7EtB,SAASuB,EAAMnC,GAI5B,OACEA,EAAMoC,OAAS,sBAAKnC,UAAS,sBAAiBD,EAAMoC,MAAM/B,KAA7B,gCAAiEgC,KAAK,QAApF,UACb,wBAAQC,MALO,CACjBC,cAAe,cAIb,SAA4BvC,EAAMoC,MAAM/B,OAD3B,IAC2CL,EAAMoC,MAAMI,OFmB1EzC,EAAO0C,UAAY,CAAErC,MAAOsC,IAAUC,OAAOC,YAE7C7C,EAAO8C,aAAe,CACpBzC,MAAO,iBACP0C,MAAO,SGYMC,MArCf,WACE,MAA0BpC,mBAAS,MAAnC,mBAAOyB,EAAP,KAAcY,EAAd,KAEM1B,EAAY,SAAC2B,EAAS5C,GAC1B2C,EAAS,CAAER,IAAKS,EAAS5C,KAAMA,IAC/B6C,YAAW,WACTF,EAAS,QACR,OAGL,EAAwBrC,mBAAS,SAAjC,mBAAOT,EAAP,KAAaiD,EAAb,KAeA,OACE,qCACE,cAACpD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAhBvB,WACJ,SAATN,GACFiD,EAAQ,SACRxB,SAASyB,KAAKd,MAAMe,WAAa,OACjC1B,SAASyB,KAAKd,MAAMgB,MAAQ,OAC5BhC,EAAU,8BAA+B,aAEzC6B,EAAQ,QACRxB,SAASyB,KAAKd,MAAMe,WAAa,OACjC1B,SAASyB,KAAKd,MAAMgB,MAAQ,OAC5BhC,EAAU,6BAA8B,eAOxC,cAACa,EAAD,CAAOC,MAAOA,IACd,qBAAKnC,UAAU,WAAf,SACE,cAACS,EAAD,CAAUI,QAAQ,kCAAkCZ,KAAMA,EAAMoB,UAAWA,UCxBpEiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.5f4ea4c9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} shadow`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand text-uppercase\" href=\"/textutilities\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active text-uppercase\" aria-current=\"page\" href=\"/textutilities\">Home</a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`${props.mode === 'light' ? 'Light' : 'Dark'}`} Mode Enabled</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.prototype = { title: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  about: 'About'\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase()\r\n    setText(newText)\r\n    props.showAlert(\"Converted to UPPERCASE\", \"success\")\r\n  }\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase()\r\n    setText(newText)\r\n    props.showAlert(\"Converted to lowercase\", \"success\")\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    setText(\"\")\r\n    props.showAlert(\"Text has been cleared\", \"success\")\r\n  }\r\n\r\n  const handleRemoveSpaceClick = () => {\r\n    let analyzed = \"\";\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (!(text[i - 1] === \" \" && text[i] === \" \")) {\r\n        analyzed += text[i];\r\n      }\r\n    }\r\n    setText(analyzed)\r\n    props.showAlert(\"Extra spaces are removed\", \"success\")\r\n  }\r\n\r\n  const handleRemoveNewLineClick = () => {\r\n    let analyzed = \"\";\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (!(text[i] === \"\\n\")) {\r\n        analyzed += text[i]\r\n      }\r\n    }\r\n    setText(analyzed)\r\n    props.showAlert(\"New lines are removed\", \"success\")\r\n  }\r\n\r\n  const handleCopyClick = () => {\r\n    var text = document.getElementById(\"myBox\")\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value)\r\n    props.showAlert(\"Text copied to clipboard\", \"success\")\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container mt-4 mb-3\">\r\n        <div className=\"my-3\">\r\n          <label htmlFor=\"myBox\" className=\"form-label\"><h2>{props.heading}</h2></label>\r\n          <textarea className={`form-control border-primary bg-${props.mode} text-${props.mode === 'dark' ? 'light' : 'dark'}`} id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center align-items-center flex-wrap\">\r\n\r\n          <button type=\"submit\" className=\"btn btn-primary m-1\" onClick={handleUpClick}>CONVERT TO UPPERCASE</button>\r\n          <button type=\"submit\" className=\"btn btn-primary  m-1\" onClick={handleLowClick}>convert to lowercase</button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-1\" onClick={handleRemoveSpaceClick}>Remove Extra Spaces</button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-1\" onClick={handleRemoveNewLineClick}>Remove New Line</button>\r\n          <button type=\"submit\" className=\"btn btn-primary  m-1\" onClick={handleClearClick}>Clear text</button>\r\n          <button type=\"submit\" className=\"btn btn-primary  m-1\" onClick={handleCopyClick}>Copy to Clipboard</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Your Text Summary</h1>\r\n        {/* Fixed word count Bug */}\r\n        <p>{text.length > 0 ? text.trim().split(\" \").length : 0} words, {text.length} characters</p> \r\n        {/* Fixed minutes read Bug */}\r\n        <p>{text.length > 0 ? 0.008 * text.trim().split(\" \").length : 0} minutes read</p> \r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Something to preview it here\"}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = {\r\n    textTransform: \"Capitalize\"\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong style={capitalize}>{props.alert.type}</strong> {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setalert({ msg: message, type: type })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n\n  const [mode, setMode] = useState('light') // whether dark mode is enabled or not\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\")\n      document.body.style.background = \"#fff\";\n      document.body.style.color = \"#000\";\n      showAlert(\"Light mode has been enabled\", \"success\")\n    } else {\n      setMode(\"dark\")\n      document.body.style.background = \"#222\";\n      document.body.style.color = \"#fff\";\n      showAlert(\"dark mode has been enabled\", \"success\")\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"continer\">\n        <Textform heading=\"Enter the text below to analyze\" mode={mode} showAlert={showAlert} />\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}